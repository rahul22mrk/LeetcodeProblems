Problem:
-------------------------------------------------------------------------------------------------
Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].

 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1


Solution:
------------------------------------------------------------------------------------------------------

Brute Force Approach:
-------------------------
Status: Time Limit Exceed
Time Complexity- O(n^2)
Space Complexity- O(1)

int reversePairs(vector<int>& nums) {
        
        int count=0;
        for(int i=0;i<nums.size()-1;i++)
        {
            
            for(int j=i+1;j<nums.size();j++)
            {
                 //int temp=nums[j]*2;
                if((long)nums[i]>(long)2*nums[j])
                {
                    count++;
                }
            }
        }
        return count;
        
    }


Optimized Solution:
------------------------
Time Complexity- O(NlogN)+O(N)+O(N)
Space Complexity- O(N)

class Solution {
public:
    int merge(vector<int>&nums,int low,int mid,int high)
    {
        int cnt=0;
        int j=mid+1;
        for(int i=low;i<=mid;i++)
        {
            while(j<=high&&(long)nums[i]>(long)2*nums[j])
                j++;
            cnt+=(j-(mid+1));
        }
        vector<int>temp;
        int left=low,right=mid+1;
        while(left<=mid&&right<=high)
        {
            if(nums[left]<=nums[right])
            {
                temp.push_back(nums[left++]);
            }else
            {
                temp.push_back(nums[right++]);
            }
        }
        while(left<=mid)
        {
            temp.push_back(nums[left++]);
        }
        while(right<=high)
        {
            temp.push_back(nums[right++]);
        }
        for(int i=low;i<=high;i++)
        {
            nums[i]=temp[i-low];
        }
        return cnt;
    }
     int mergeSort(vector<int>&nums,int low,int high)
    {
         if(low>=high)
             return 0;
         int mid=(low+high)/2;
         int inv=mergeSort(nums,low,mid);
         inv+=mergeSort(nums,mid+1,high);
         inv+=merge(nums,low,mid,high);
         return inv;
        
    }
    int reversePairs(vector<int>& nums) {
        
        return mergeSort(nums,0,nums.size()-1);
        
    }
    
   
};